@using CommonUtils.ExtendedTypes
@using Project_B.CodeClientSide.Enums
@using Project_B.CodeClientSide.Helper
@using Project_B.CodeClientSide.TransportType
@using Project_B.CodeServerSide.DataProvider.DataHelper
@using Project_B.CodeServerSide.Entity.Interface
@using Project_B.CodeServerSide.Enums
@model Tuple<CompetitionTransport, DisplayColumnType>

@functions{
    const string timeFormat = "dd'/'MM HH:00";
}

@helper RenderDateTime(int currentYear, DateTime dateTime, int competitionID) {
    <a href="@Url.Action("Game", "Competition", new {id = competitionID})">
        @if (dateTime.Year != currentYear) {
            @dateTime.ToString("dd.MM.yyyy")<br />@dateTime.ToString("HH:mm")
        } else {
            @dateTime.ToString(timeFormat)
        }
    </a>
}
@helper RenderOddCell(DisplayColumnType displayColumnType, BetOddType oddType, bool isSuccess, BetItemTransport maxBet, BetItemTransport currentBet, BetItemTransport minBet) {
    if (!DisplayColumnProcessor.NeedDrawCell(oddType, displayColumnType)) {
        return;
    }
    if (currentBet !=null && currentBet.Odd != default(float)) {
        <td class="small @if(isSuccess) {@Html.Raw("success")}">
            @if (displayColumnType.HasFlag(DisplayColumnType.MaximalOdds)) {
                <div class="small" title="@(maxBet.DateTimeUtc.ToString(timeFormat) + " - Max")">@maxBet.Odd</div>
            }
            @BetOddRenderHelper.RenderBetOdd(oddType, currentBet)
            @if (displayColumnType.HasFlag(DisplayColumnType.MinimalOdds)) {
                <div class="small" title="@(minBet.DateTimeUtc.ToString(timeFormat) + " - Min")">@minBet.Odd</div>
            }
        </td>
    } else {
        <td @if(isSuccess) { @Html.Raw("class=\"success\"") }>&mdash;</td>
    }
}

@helper RenderRoiCell(DisplayColumnType displayColumnType, SportType sportType, Dictionary<BetOddType, BetItemTransport> maxBet, Dictionary<BetOddType, BetItemTransport> currentBet, Dictionary<BetOddType, BetItemTransport> minBet) {
    if (!DisplayColumnProcessor.NeedDrawCell(SiteTextType.GridOddRoi, displayColumnType)) {
        return;
    }
    var currentPercentile = BetOddInterfaceHelper.GetMaxBetOddRoi(RoiType.All, sportType, currentBet);
    if (currentPercentile != default(int)) {
        <td class="small @if(currentPercentile > default(float)) {@Html.Raw("success")}" title="ROI">
            @if (displayColumnType.HasFlag(DisplayColumnType.MaximalOdds)) {
                @BetOddInterfaceHelper.GetMaxBetOddRoi(RoiType.All, sportType, maxBet).ToString("#0.#'%'")
                <br/>
            }
            <b>@currentPercentile.ToString("#0.#'%'")</b>
            @if (displayColumnType.HasFlag(DisplayColumnType.MinimalOdds)) {
                <br />
                @BetOddInterfaceHelper.GetMaxBetOddRoi(RoiType.All, sportType, minBet).ToString("#0.#'%'")
            }
        </td>
    } else {
        <td>&mdash;</td>
    }
}

@helper RenderResultCell(DisplayColumnType displayMode, CompetitionItemBetShortTransport competition) {
    if (DisplayColumnProcessor.NeedDrawCell(SiteTextType.GridOddResult, displayMode)) {
        <td class="small text-center">
            @if (competition.Result != null) {
                var score = ScoreHelper.Instance.GenerateScore(competition.Result.ScoreID).With(s => string.Format("{0}:{1}", s.Item1, s.Item2));
                <b title="@score">@score</b>
                if (competition.Result.SubScore != null && competition.Result.SubScore.Length > 0) {
                    var subResult = competition.Result.SubScore.Select(s => {
                        var sc = ScoreHelper.Instance.GenerateScore(s);
                        return string.Format("{0}:{1}", sc.Item1, sc.Item2);
                    }).StrJoin(", ");
                    <div title="@subResult">@subResult</div>
                }
            } else {
                @Html.Raw("&mdash;")
            }
        </td>
    }
}

@{
    var data = Model.Item1;
    var displayMode = Model.Item2;
    var headers = DisplayColumnProcessor.TableHeaders[data.SportType].ToArray();
    var currentYear = DateTime.UtcNow.Year;
}

<table class="table table-bordered table-hover text-right text-nowrap gridOdds">
    <thead>
        <tr class="small">
            <td class="col-xs-1"></td>
            <td class="col-xs-2"></td>
            @foreach (var header in headers) {
                if (DisplayColumnProcessor.NeedDrawCell(header, displayMode)) {
                    <td>@Html.Raw(LanguageSiteHelper.Instance.GetText(data.Language, header))</td>
                }
            }
        </tr>
    </thead>
    @for (var index = 0; index < data.CompetitionItems.Count; index++) {
        var competition = data.CompetitionItems[index];
        var successActs = new List<BetOddType>();
        if (competition.Result != null) {
            successActs.AddRange(BetOddInterfaceHelper.GetSuccessOddTypes(data.SportType, competition.Result, competition.CurrentBets));
        }
        <tr @if (competition.Result != null) { @Html.Raw("class=\"active\"")}>
            <td>
                @RenderDateTime(currentYear, competition.DateUtc, competition.CompetitionItemID)
            </td>
            <td class="text-left">
                1. <a href="@Url.Action("Competitor", "History", new {id = competition.Competitor1.ID})" title="@competition.Competitor1.Name">@competition.Competitor1.Name</a>
                <br />
                2. <a href="@Url.Action("Competitor", "History", new {id = competition.Competitor2.ID})" title="@competition.Competitor2.Name">@competition.Competitor2.Name</a>
            </td>
            @RenderRoiCell(displayMode, data.SportType, competition.HistoryMaxBets, competition.CurrentBets, competition.HistoryMinBets)
            @foreach (var oddType in BetHelper.SportTypeWithOdds[data.SportType]) {
                @RenderOddCell(displayMode, oddType, successActs.Contains(oddType),
                    competition.HistoryMaxBets.TryGetValueOrDefault(oddType),
                    competition.CurrentBets.TryGetValueOrDefault(oddType),
                    competition.HistoryMinBets.TryGetValueOrDefault(oddType))
            }
            @RenderResultCell(displayMode, competition)
        </tr>
    }
</table>