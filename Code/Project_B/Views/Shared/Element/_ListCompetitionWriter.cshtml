@using CommonUtils.ExtendedTypes
@using Project_B.CodeClientSide.TransportType
@using Project_B.CodeServerSide.DataProvider.DataHelper
@using Project_B.CodeServerSide.Entity.Interface
@using Project_B.CodeServerSide.Enums
@using Project_B.Models
@model StaticPageBaseModel<CompetitionRegularModel>
@functions{
    static readonly Dictionary<LanguageType, string[]> _shortHeaders = new Dictionary<LanguageType, string[]> {
        {LanguageType.English, new[] {
            "<b>1</b>",
            "<b>2</b>",
            "Hcap<b>1</b>",
            "Hcap<b>2</b>",
            "Under",
            "Over",
        } },
        {LanguageType.Russian, new[] {
            "<b>1</b>",
            "<b>2</b>",
            "Фора<b>1</b>",
            "Фора<b>2</b>",
            "Меньше",
            "Больше",
        } },
    };
    static readonly Dictionary<LanguageType, string[]> _fullHeaders = new Dictionary<LanguageType, string[]> {
        {LanguageType.English, new[] {
            "<b>1</b>",
            "<b>X</b>",
            "<b>2</b>",
            "<b>1X</b>",
            "<b>12</b>",
            "<b>X2</b>",
            "Hcap<b>1</b>",
            "Hcap<b>2</b>",
            "Under",
            "Over",
        } },
        {LanguageType.Russian, new[] {
            "<b>1</b>",
            "<b>X</b>",
            "<b>2</b>",
            "<b>1X</b>",
            "<b>12</b>",
            "<b>X2</b>",
            "Фора<b>1</b>",
            "Фора<b>2</b>",
            "Меньше",
            "Больше",
        } },
    };

    static readonly Dictionary<LanguageType, Dictionary<SportType, string[]>> _tableHeaders = new Dictionary<LanguageType, Dictionary<SportType, string[]>> {
        {LanguageType.English, new Dictionary<SportType, string[]> {
            {SportType.Basketball, _shortHeaders[LanguageType.English] },
            {SportType.Football, _fullHeaders[LanguageType.English] },
            {SportType.IceHockey, _fullHeaders[LanguageType.English] },
            {SportType.Tennis, _shortHeaders[LanguageType.English] },
            {SportType.Volleyball, _shortHeaders[LanguageType.English] },
        } },
        {LanguageType.Russian, new Dictionary<SportType, string[]> {
            {SportType.Basketball, _shortHeaders[LanguageType.Russian] },
            {SportType.Football, _fullHeaders[LanguageType.Russian] },
            {SportType.IceHockey, _fullHeaders[LanguageType.Russian] },
            {SportType.Tennis, _shortHeaders[LanguageType.Russian] },
            {SportType.Volleyball, _shortHeaders[LanguageType.Russian] },
        } },
    };
    private readonly Dictionary<LanguageType, string> _seeAllDictionaryText = new Dictionary<LanguageType, string> {
        {LanguageType.English, "See all <b>{0}</b> matches in <b>{1}</b>" },
        {LanguageType.Russian, "Посмотреть все <b>{0}</b> игр в <b>{1}</b>" },
    };

    private static readonly BetOddType[] _shortPercentile = {
        BetOddType.Win1,
        BetOddType.Win2
    };
    private static readonly BetOddType[] _fullPercentile = {
        BetOddType.Win1,
        BetOddType.Draw,
        BetOddType.Win2
    };
    private static readonly Dictionary<SportType, BetOddType[]> _percentileMap = new Dictionary<SportType, BetOddType[]> {
        {SportType.Basketball, _shortPercentile },
        {SportType.Football, _fullPercentile },
        {SportType.IceHockey, _fullPercentile },
        {SportType.Tennis, _shortPercentile },
        {SportType.Volleyball, _shortPercentile },
    };

    static int GetBetPercentile(SportType sportType, Dictionary<BetOddType, BetItemTransport> bets) {
        var percentileMap = _percentileMap[sportType];
        var odds = new float[percentileMap.Length];
        var haveZero = false;
        for (var i = 0; i < percentileMap.Length; i++) {
            var odd = bets[percentileMap[i]].Odd;
            if (odd == default(float)) {
                haveZero = true;
                continue;
            }
            odds[i] = 1 / (odd);
        }
        return haveZero ? default(int) : (int)(100 / odds.Sum() - 100);
    }

    static List<BetOddType> GetSuccessOddTypes(ResultTransport resultTransport, Dictionary<BetOddType, BetItemTransport> currentBets) {
        var score = ScoreHelper.Instance.GenerateScore(resultTransport.ScoreID);
        var successActs = new List<BetOddType> { ScoreHelper.Instance.GetResultType(score.Item1, score.Item2) };
        if (currentBets != null) {
            BetItemTransport betItemTransport;
            if (currentBets.TryGetValue(BetOddType.Handicap1, out betItemTransport)) {
                var advancedParam = betItemTransport.AdvancedParam;
                successActs.Add(advancedParam <= score.Item1 - score.Item2 ? BetOddType.Handicap1 : BetOddType.Handicap2);
                successActs.Add(advancedParam >= score.Item1 - score.Item2 ? BetOddType.Handicap2 : BetOddType.Handicap1);
            }
            if (currentBets.TryGetValue(BetOddType.TotalUnder, out betItemTransport)) {
                successActs.Add(betItemTransport.AdvancedParam >= score.Item1 + score.Item2 ? BetOddType.TotalUnder : BetOddType.TotalOver);
                successActs.Add(betItemTransport.AdvancedParam <= score.Item1 + score.Item2 ? BetOddType.TotalOver : BetOddType.TotalUnder);
            }
        }
        return successActs;
    }

    private static readonly BetOddType[] _oddsWithAdvanced = {
        BetOddType.Handicap1,
        BetOddType.Handicap2,
        BetOddType.TotalUnder,
        BetOddType.TotalOver,
    };

    private static readonly BetOddType[] _oddsToInvertAdvanced = {
        BetOddType.Handicap1
    };

    private static readonly BetOddType[] _oddsWithSymbol = {
        BetOddType.Handicap1,
        BetOddType.Handicap2,
    };

}

@helper RenderAdvancedParam(BetOddType oddType, float advanced) {
if (_oddsWithAdvanced.Contains(oddType)) {
    advanced = _oddsToInvertAdvanced.Contains(oddType) ? -advanced : advanced;
    if (_oddsWithSymbol.Contains(oddType)) {
            @Html.Raw(string.Format("({0}{1})", advanced > 0 ? "+" : advanced < 0 ? "-" : string.Empty, Math.Abs(advanced)))
    } else {
            @Html.Raw(string.Format("({0})", advanced))
    }
}
}

@{
    var resultMap = Model.ControllerModel.ResultMap ?? new Dictionary<int, ResultTransport>();
    var currentController = ViewContext.RouteData.Values["controller"].ToString();
}

@foreach (var bySportTypes in Model.ControllerModel.CompetitionModel.GroupBy(c => c.SportType)) {
    var headers = (_tableHeaders.TryGetValueOrDefault(Model.CurrentLanguage) ??
                   _tableHeaders.TryGetValueOrDefault(LanguageType.English))[bySportTypes.Key];
    <H2><a href="@Url.Action("Index", currentController, new {id = bySportTypes.Key})">@SportTypeHelper.Instance.GetSportNameForLanguage(Model.CurrentLanguage, bySportTypes.Key)</a></H2>
    foreach (var groupedCompetitions in bySportTypes.GroupBy(c => c.Competition.ID).OrderBy(c => c.First().Competition.Name).ToArray()) {
        var competitionModel = groupedCompetitions.First().Competition;
        var itemBetShortModels = groupedCompetitions.ToArray();
        var appendSeeAllLink = false;
        <H3><a href="@Url.Action("Game", currentController, new {id = competitionModel.ID})">@competitionModel.Name</a></H3>
        <table class="table">
            <thead>
                <tr>
                    <td class="col-md-1"></td>
                    <td class="col-md-2"></td>
                    <td></td>
                    @foreach (var header in headers) {
                        <td>@Html.Raw(header)</td>
                    }
                    <td class="col-md-1"></td>
                </tr>
            </thead>
            @for (var index = 0; index < itemBetShortModels.Length; index++) {
                if (index == Model.ControllerModel.LimitToDisplayInGroup) {
                    appendSeeAllLink = true;
                    break;
                }
                var competition = itemBetShortModels[index];
                ResultTransport resultTransport;
                var successActs = new List<BetOddType>();
                if (resultMap.TryGetValue(competition.CompetitionID, out resultTransport)) {
                    successActs.AddRange(GetSuccessOddTypes(resultTransport, competition.CurrentBets));
                }
                <tr @if (resultTransport != null) { @Html.Raw("class=\"active\"")   }>
                    <td class="text-right">
                        <a href="@Url.Action("Item", "Competition", new {id = competition.CompetitionID})">
                            @competition.DateUtc.ToString("dd.MM.yyyy")<br />@competition.DateUtc.ToString("HH:mm")
                        </a>
                    </td>
                    <td>
                        <a href="@Url.Action("Competitor", "History", new {id = competition.Competitor1.ID})">@competition.Competitor1.Name</a>
                        <br />
                        <a href="@Url.Action("Competitor", "History", new {id = competition.Competitor2.ID})">@competition.Competitor2.Name</a>
                    </td>
                    @if (competition.CurrentBets != null && competition.HistoryMaxBets != null && competition.HistoryMinBets != null) {
                        var currentPercentile = GetBetPercentile(bySportTypes.Key, competition.CurrentBets);
                        if (currentPercentile != default(int)) {
                            <td>
                                <small>@GetBetPercentile(bySportTypes.Key, competition.HistoryMaxBets)%</small>
                                <div>
                                    <b>@currentPercentile%</b>
                                </div>
                                <small>@GetBetPercentile(bySportTypes.Key, competition.HistoryMinBets)%</small>
                            </td>
                        } else {
                            <td>&mdash;</td>
                        }
                        foreach (var oddType in BetHelper.SportTypeWithOdds[competition.SportType]) {
                            var currentBet = competition.CurrentBets[oddType];
                            if (currentBet.Odd != default(float)) {
                                var maxBet = competition.HistoryMaxBets[oddType];
                                var minBet = competition.HistoryMinBets[oddType];
                                <td @if (successActs.Contains(oddType)) { @Html.Raw("class=\"success\"")   }>
                                    <small title="@maxBet.DateTimeUtc.ToString("dd.MM.yyyy HH:00")">@maxBet.Odd</small>
                                    <div title="@currentBet.DateTimeUtc.ToString("dd.MM.yyyy HH:00")">
                                        <small>@RenderAdvancedParam(oddType, currentBet.AdvancedParam)</small><b>@currentBet.Odd</b>
                                    </div>
                                    <small title="@minBet.DateTimeUtc.ToString("dd.MM.yyyy HH:00")">@minBet.Odd</small>
                                </td>
                            } else {
                                <td @if (successActs.Contains(oddType)) { @Html.Raw("class=\"success\"")   }>&mdash;</td>
                            }
                        }
                    } else {
                        <td>&mdash;</td>
                        foreach (var oddType in BetHelper.SportTypeWithOdds[competition.SportType]) {
                            <td @if (successActs.Contains(oddType)) { @Html.Raw("class=\"success\"")   }>&mdash;</td>
                        }
                    }
                    <td class="text-center">
                        @if (resultTransport != null) {
                            var score = ScoreHelper.Instance.GenerateScore(resultTransport.ScoreID);
                            <b>@string.Format("{0}:{1}", score.Item1, score.Item2)</b>
                            if (resultTransport.SubScore != null && resultTransport.SubScore.Length > 0) {
                                <br />
                                <small>
                                    @resultTransport.SubScore.Select(s => {
                                   var sc = ScoreHelper.Instance.GenerateScore(s);
                                   return string.Format("{0}:{1}", sc.Item1, sc.Item2);
                               }).StrJoin(", ")
                                </small>
                            }
                        } else {
                            @Html.Raw("&mdash;")
                            ;
                        }
                    </td>
                </tr>
            }
        </table>
        if (appendSeeAllLink) {
            <div class="text-right">
                <a href="@Url.Action("Game", currentController, new {id = competitionModel.ID})">@Html.Raw(
                   string.Format(_seeAllDictionaryText.TryGetValueOrDefaultStruct(Model.CurrentLanguage) ?? _seeAllDictionaryText.TryGetValueOrDefaultStruct(LanguageType.English),
                                 itemBetShortModels.Length, competitionModel.Name))</a>
        </div>
        }
    }
}