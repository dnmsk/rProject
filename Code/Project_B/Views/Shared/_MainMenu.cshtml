@using CommonUtils.ExtendedTypes
@using Project_B.CodeClientSide.Enums
@using Project_B.CodeClientSide.Helper
@using Project_B.CodeServerSide.DataProvider.DataHelper
@using Project_B.CodeServerSide.Enums
@using Project_B.Models
@model Project_B.Models.StaticPageBaseModel

@functions {
    private static readonly SportType[] _sportTypesToNavigation = {
        SportType.Football,
        SportType.Tennis,
        SportType.Basketball,
        SportType.Volleyball,
        SportType.IceHockey
    };
}
@{
    var currentController = ViewContext.RouteData.Values["controller"] as string;
    var currentAction = ViewContext.RouteData.Values["action"] as string;
    var currentID = ViewContext.RouteData.Values["id"] as string ?? string.Empty;
    var currentLanguage = Model.CurrentLanguage != LanguageType.Default ? Model.CurrentLanguage : LanguageType.English;
    var routeValues = new { area = "" };
}

@helper MarkActive(string action, string controller, string curAction, string curController, bool active = true) {
if (active && controller.Equals(curController, StringComparison.InvariantCultureIgnoreCase) && action.Equals(curAction, StringComparison.InvariantCultureIgnoreCase)) {
    @Html.Raw("class=\"active\" ")
}
}

<div class="navbar navbar-inverse navbar-fixed-top">
    <div class="container">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a class="navbar-brand" href="@Url.Action("Index", "Home", routeValues)" @MarkActive("Index", "Home", currentAction, currentController)>@LanguageSiteHelper.Instance.GetText(currentLanguage, SiteTextType.HeaderSiteName)</a>
        </div>

        <div class="navbar-collapse collapse">
            <ul class="nav navbar-nav">
                <li><a href="@Url.Action("Profitable", "Competition", routeValues)" @MarkActive("Profitable", "Competition", currentAction, currentController)>@LanguageSiteHelper.Instance.GetText(currentLanguage, SiteTextType.HeaderCompetition)</a></li>
                <li><a href="@Url.Action("Index", "CompetitionLive", routeValues)" @MarkActive("Index", "CompetitionLive", currentAction, currentController)>@LanguageSiteHelper.Instance.GetText(currentLanguage, SiteTextType.HeaderCompetitionLive)</a></li>
                <li><a href="@Url.Action("Index", "History", routeValues)" @MarkActive("Index", "History", currentAction, currentController)>@LanguageSiteHelper.Instance.GetText(currentLanguage, SiteTextType.HeaderHistory)</a></li>
                <li><a href="@Url.Action("Index", "Bookmaker", routeValues)" @MarkActive("Index", "Bookmaker", currentAction, currentController)>@LanguageSiteHelper.Instance.GetText(currentLanguage, SiteTextType.HeaderBookmaker)</a></li>
            </ul>
            @Html.Partial("_LoginPartial", Model)
        </div>
    </div>
</div>
@if (Model.SubNavigationType != SubNavigationType.None) {
    <div class="navbar">
        <div class="container">
            <div class="navbar-default">
                <ul class="nav navbar-nav">
                    @switch (Model.SubNavigationType) {
                        case SubNavigationType.SportTypes:
                            var castedModel = Model as StaticPageBaseModel<CompetitionRegularModel>;
                            var routeDict = castedModel != null && castedModel.ControllerModel.Filter != null
                                ? castedModel.ControllerModel.Filter.ToRoute()
                                : new RouteValueDictionary();
                            routeDict["id"] = string.Empty;
                            <li><a href="@Url.Action("Index", currentController, routeDict)" @MarkActive("Index", currentController, currentAction, currentController, currentID.IsNullOrWhiteSpace())>@LanguageSiteHelper.Instance.GetText(currentLanguage, SiteTextType.SubHeaderAllCompetitions)</a></li>
                            foreach (var sportType in _sportTypesToNavigation) {
                                routeDict["id"] = sportType;
                                <li><a href="@Url.Action("Index", currentController, routeDict)" @MarkActive("Index", currentController, currentAction, currentController, currentID.Equals(sportType.ToString(), StringComparison.InvariantCultureIgnoreCase))>@SportTypeHelper.Instance.GetSportNameForLanguage(currentLanguage, sportType)</a></li>
                            }
                            if ("Competition".Equals(currentController, StringComparison.InvariantCultureIgnoreCase)) {
                                <li><a href="@Url.Action("Profitable", currentController, new {id = string.Empty})" @MarkActive("Profitable", "Competition", currentAction, currentController)><b>@LanguageSiteHelper.Instance.GetText(currentLanguage, SiteTextType.SubHeaderProfitable)</b></a></li>
                            }
                            break;
                        case SubNavigationType.Home:
                            break;
                        case SubNavigationType.Bookmakers:
                            break;
                    }
                </ul>


            </div>
        </div>
    </div>
}